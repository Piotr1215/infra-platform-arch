apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    type: frontend
  name: app-frontend
spec:
  compositeTypeRef:
    apiVersion: acmeplatform.com/v1alpha1
    kind: App
  mode: Pipeline
  pipeline:
    - step: prepare-resources
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets:
          - name: metadata
            patches:
              - fromFieldPath: metadata.labels
                type: FromCompositeFieldPath
        resources:
          - name: container
            base:
              apiVersion: storage.azure.upbound.io/v1beta1
              kind: Container
              metadata:
                labels:
                  app-storage: frontend
                name: sample-blob
              spec:
                deletionPolicy: Orphan
                forProvider:
                  containerAccessType: private
                  storageAccountNameSelector:
                    matchLabels:
                      app-storage: frontend
          - name: resouce-group
            base:
              apiVersion: storage.azure.upbound.io/v1beta1
              kind: Account
              metadata:
                labels:
                  app-storage: frontend
                name: platformdemostorage111
              spec:
                deletionPolicy: Orphan
                writeConnectionSecretToRef:
                  name: azure-secret
                  namespace: devops-team
                forProvider:
                  blobProperties:
                    versioningEnabled: true
                  accountKind: StorageV2
                  accountReplicationType: LRS
                  accountTier: Standard
                  isHnsEnabled: false
                  location: West Europe
                  resourceGroupNameRef:
                    name: platform-demo
          - name: namespace
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: Namespace
                    metadata:
                      name: devops-team
          - name: deployment
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: foo-app-deployment
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: foo
                      template:
                        metadata:
                          labels:
                            app: foo
                        spec:
                          containers:
                            - env:
                                - name: AZURE_STORAGE_CONNECTION_STRING
                                  valueFrom:
                                    secretKeyRef:
                                      key: attribute.primary_connection_string
                                      name: azure-secret
                              image: piotrzan/platform-demo:latest
                              imagePullPolicy: Always
                              name: foo-app
            patches:
              - fromFieldPath: spec.parameters.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.image
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].image
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.connectionVariableName
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[0].name
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None
          - name: service
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: foo-service
                    spec:
                      ports:
                        - port: 3000
                      selector:
                        app: foo
            patches:
              - fromFieldPath: spec.parameters.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.ports[0].port
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.ports[0].targetPort
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None
          - name: Ingress
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: networking.k8s.io/v1
                    kind: Ingress
                    metadata:
                      name: example-ingress
                    spec:
                      rules:
                        - http:
                            paths:
                              - backend:
                                  service:
                                    name: foo-service
                                    port:
                                      number: 3000
                                path: /blob-content
                                pathType: Prefix
                              - backend:
                                  service:
                                    name: foo-service
                                    port:
                                      number: 3000
                                path: /
                                pathType: Prefix
            patches:
              - fromFieldPath: spec.parameters.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.port.number
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[1].backend.service.port.number
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None
    - step: detect-ready-resources
      functionRef:
        name: function-auto-ready
    - step: http-confirmation
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets:
          - name: metadata
            patches:
              - fromFieldPath: metadata.labels
                type: FromCompositeFieldPath
        resources:
          - name: http-confirmation
            base:
              apiVersion: http.crossplane.io/v1alpha2
              kind: DisposableRequest
              metadata:
                name: slack-webhook
              spec:
                deletionPolicy: Orphan
                forProvider:
                  url: $WEBHOOK_URL
                  method: POST
                  body: '{ "channel": "#app-notify", "username": "webhookbot", "text": "The app is deployed to: http://localhost", "icon_emoji": ":ghost:" }'
